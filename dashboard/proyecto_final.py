# -*- coding: utf-8 -*-
"""Proyecto_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vaTDT55rDueY-GB-OZk1ic47Bzhu0vH6

Algunos tutoriales que pueden ser útiles: https://algotrading101.com/learn/kraken-api-guide/

# Python para el análisis de datos -  UNAV 2020-2021
---

# Proyecto Final

Este año, la nota final se evaluará teniendo en cuenta un pequeño proyecto.
Este proyecto se realizará por parejas. Estas parejas no podrán haber estudiado juntos o estar en el mismo equipo a nivel laboral.
 

El proyecto consistirá en ser capaces de bajar la cotización de un par de monedas, un ejemplo de cotizaciones en Kraken:
https://www.kraken.com/es-es/prices?quote=EUR

Después de bajarlas, será necesario hacer una gráfica del movimiento que ha tenido.

Además, se hará una gráfica de la media móvil:
https://www.rankia.com/diccionario/trading/medias-moviles

La entrega final consistirá como mínimo en:

- Una memoria, la memoria será el contenido principal de la entrega.
- Código, excluida cualquier librería adicional. Este código será material auxiliar para la corrección pero será obligado que también esté presente en la entrega.

Puntos mínimos:

- Lectura y representación del movimiento del par de monedas - Máximo (4 puntos)
    - Descargar datos. Máximo (2 puntos)  
        - Utilizando la librería Kraken (2 puntos).
          https://github.com/veox/python3-krakenex
        - Utilizando descarga directa a través de Pandas (1 punto).
          https://drive.google.com/uc?id=1eQsiD8Z8wEt1mx9VICzCmIEQufWjaUD-
        - Descargar directamente y utilizar el csv en local (0 puntos).
    - Graficar cotizaciones. Máximo (2 puntos).
        - Graficar el par ETH/USDT (1 punto).
        - Input de usuario que permita graficar cualquier cotización o una a elegir en el menú (2 puntos).

- Indicadores técnicos. Máximo (3 puntos).
    - Calcular el Media Móvil y graficarla (1 puntos).
    - Calcular el RSI y graficarlo (1 puntos).
    - Graficar el Media Móvil junto con la cotización del par calculado (1 punto).

- Estructuración. Máximo (1 punto)
    - Funciones (0,5 puntos)
    - Utilización de clases (0,5 puntos)
    - Manejo de errores y excepciones (0,5 puntos)

- Memoria obligatoria. Máximo (2 puntos).
    - Descripción de cómo se ha afrontado el proyecto y por qué.
    - Descripción detallada de cada uno de los puntos que se evalúan.
    - Descripción de la estructura del código y estructura de ficheros.
    - Descripción de la forma de ejecución del código.
    - Pantallazos de todo Aquel punto que requiera algún tipo de visualización.
    - NADA QUE NO SE PUEDA ENCONTRAR DESCRITO O MOSTRADO EN LA MEMORIA SERÁ EVALUADO, AUNQUE ESTÉ REALIZADO EN EL CÓDIGO.

- Puntación Extra. Máximo (1 punto)
    - Testeo y cobertura (unit-testing, integration-testing) 0,25 puntos
    - Facilitar los mecanismos para la reproducción del entorno virtual (ya sea con Poetry, Pipenv o pip) 0,25 puntos
    - Distribución del proyecto a través de PyPi o una plataforma PaaS (AWS, Heroku, etc) 0,25 puntos

La plazo de entrega finalizará el 29 de diciembre a las 23:59.
"""


# IMPORTS

import pandas_ta as pta
import pandas as pd
import krakenex
import plotly.graph_objects as go
import plotly.express as px
import datetime
import streamlit as st
from pykrakenapi import KrakenAPI


def data_extract(crypto, k_api):
    
    #Solicita los datos OHLC del par deseado
    ohlc, last = k_api.get_ohlc_data(crypto, interval=1440)
    
    return ohlc


def proyecto():
    
    #Carga la API key para conectarse a Kraken
    k = krakenex.API()
    k.load_key('api-key.key')
    
    #Solicita la lista de pares de divisas con las que opera Kraken
    list_values = list(k.query_public('AssetPairs')['result'].keys())
    index_value = list_values.index('ETHUSDT')
    
    #Genera en el dashboard un desplegable con los pares
    pair = st.selectbox('Seleccione el par que quiere usar: ',
                        list_values, index=index_value)
    
    #Solicita los datos del par elegido en el desplegable
    api = krakenex.API()
    kraken_api = KrakenAPI(api)
    data, _ = kraken_api.get_ohlc_data(pair, interval=1440)
    
    #Preprocesado de los datos extraidos
    data = data.sort_index().rename(columns={"time": "date"})
    data['date'] = data['date'].apply(
        lambda x: datetime.datetime.utcfromtimestamp(x).strftime('%Y-%m-%d %H:%M:%S'))

    return data, pair


def transform_data(data):
    
    #Calcula los indicadores tecnicos del enunciado
    data['MA_price'] = data['close'].rolling(30).mean()
    data['EMA_price'] = data['close'].ewm(span=30).mean()
    data.dropna(inplace=True)
    
    return data


def get_rsi(data):
    
    #Calcula el RSI
    data['rsi'] = pta.rsi(data['close'], length=14)
    
    return data
